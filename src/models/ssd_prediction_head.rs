use burn::{
    module::Module,
    nn::{
        PaddingConfig2d,
        conv::{Conv2d, Conv2dConfig},
    },
    tensor::Tensor,
};

use crate::{boxes::get_box_count_for_layer, layers::SSDConvLayers};
use burn::prelude::Backend;

/// Creates the classification and bounding-box regression heads for SSD predictions.
///
/// # Parameters
/// - `device`: The device on which the layers will be initialized.
/// - `layer`: The SSD convolutional layer whose output channels determine the head input size.
/// - `cls_cnt`: The number of object classes to predict.
///
/// # Description
/// This constructor builds two convolutional layers:
///
/// 1. **Classification head (`conv_classifier`)**  
///    - Output size = `cls_cnt × box_count_for_layer(layer)`  
///    - Predicts class scores for each default box generated by the SSD network.  
///    - The number of output channels depends on the number of classes and the number of default
///      boxes per location (determined by aspect ratio configuration).
///
/// 2. **Bounding box regression head (`conv_bbox`)**  
///    - Output size = `4 × box_count_for_layer(layer)`  
///    - Predicts translation values `(cx, cy, w, h)` for each default box.
///
/// Both heads use `3×3` convolution kernels with explicit padding of `(1, 1)` to preserve spatial
/// resolution.
///  
///  # Notes
/// 
/// Relevant excerpt from
/// 
/// “SSD: Single Shot MultiBox Detector”
/// Authors: Wei Liu, Dragomir Anguelov, Dumitru Erhan, Christian Szegedy,
///          Scott Reed, Cheng-Yang Fu, Alexander C. Berg
/// Link (official): https://arxiv.org/abs/1512.02325
/// 
/// - Liu et al. - Pg 3
/// 
/// Convolutional predictors for detection
///
/// Each added feature layer (or optionally an existing feature layer from the base network)
/// can produce a fixed set of detection predictions using a set of convolutional filters.
/// These are indicated on top of the SSD network architecture in Fig. 2. For a feature layer
/// of size m × n with p channels,the basic element for predicting parameters of a potential
/// detection is a 3 × 3 × p small kernel that produces either a score for a category, or a
/// shape offset relative to the default box coordinates. At each of the m × n locations
/// where the kernel is applied, it produces an output value. The bounding box offset output
/// values are measured relative to a default box position relative to each feature map location
/// (cf the architecture of YOLO[5] that uses an intermediate fully connected layer instead of a
/// convolutional filter for this step).
///
/// # Returns
/// A new `SSDPredictionHead` initialized on the given device.
#[derive(Module, Debug)]
pub struct SSDPredictionHead<B: Backend> {
    pub(crate) conv_classifier: Conv2d<B>,
    pub(crate) conv_bbox: Conv2d<B>,
}

// Class predictions shape - [1, 21, N]
//
// The output of the class predictions can be interpreted like so:
//
//   bkgd, dog, pig, cow
// [
// [ 0.0, -2.0, 6.0, 1.0],
// [-3.0,  2.0, 6.0, 2.0],
// [-8.0,  3.0, 1.0, 0.7]
// [ 10.0,  3.0, 1.0, 0.7]
// ]
//
// Default box 0 is predicted to contain class 2 ("pig") - highest score is 6.0
// Default box 1 is predicted to contain class 2 ("pig") - highest score is 6.0
// Default box 2 is predicted to contain class 1 ("dog") - highest score is 3.0
// Default box 3 is predicted to contain class 0 ("background") - highest score is 10.0
//
// targets:   [1, 2, 1] -
//
// Ground truth: Box 0 = class 1 ("dog"), Box 1 = class 2 ("pig"), Box 2 = class 1 ("dog")
//
// Bounding box predictions shape - [1, 4, N]
//
// The output of the bounding box predictions contain translations for predictions for each
// box in this prediction only the boxes with a high confidence level from the
// classification prediction are kept. The rest, which would be classified as 'background'
// are not used.
//
// [
// [ 0.0, -2.0, 6.0, 1.0],
// [-3.0,  2.0, 6.0, 2.0],
// [-8.0,  3.0, 1.0, 0.7]
// ]
//
// Apply this translation to default box 0 (and use if it's confidence score is high)
// Apply this translation to default box 1 (and use if it's confidence score is high)
// Apply this translation to default box 2 (and use if it's confidence score is high)

impl<B: Backend> SSDPredictionHead<B> {
    pub fn new(device: &B::Device, layer: &SSDConvLayers, cls_cnt: usize) -> Self {
        SSDPredictionHead {
            conv_classifier: Conv2dConfig::new(
                [
                    layer.output_size(),
                    cls_cnt * get_box_count_for_layer(layer),
                ],
                [3, 3],
            )
            .with_padding(PaddingConfig2d::Explicit(1, 1))
            .init(device),
            conv_bbox: Conv2dConfig::new(
                [layer.output_size(), 4 * get_box_count_for_layer(layer)],
                [3, 3],
            )
            .with_padding(PaddingConfig2d::Explicit(1, 1))
            .init(device),
        }
    }

    pub fn forward(&self, input: Tensor<B, 4>) -> (Tensor<B, 4>, Tensor<B, 4>) {
        (
            self.conv_classifier.forward(input.clone()),
            self.conv_bbox.forward(input.clone()),
        )
    }
}
